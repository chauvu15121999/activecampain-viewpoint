version: '3.8'
services:
  app:
    container_name: "app"
    environment:
      - NODE_ENV:${NODE_ENV}
    build:
      context: ./app
      target: "${NODE_ENV}"
      dockerfile: Dockerfile
    entrypoint: ["npm", "run", "start:${NODE_ENV}"]
    env_file:
      - .env
    ports:
      - ${SERVER_PORT}:${SERVER_PORT}
      - 9229:9229
    networks:
        - app-network
    volumes:
      - ./app:/usr/src/app
      - /usr/src/app/node_modules
    restart: unless-stopped
    command: npm run start:dev
    depends_on:
      - webserver
      - dbmysql
  # Nginx Service
  webserver:
    image: nginx:alpine
    container_name: webserver
    restart: always
    tty: true
    environment:
      SERVICE_NAME: nginx
    ports:
      - "9090:80"
    volumes:
      - ./nginx/templates:/etc/nginx/templates
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - app-network

  # REDIS
  redis:
      image: redis
      container_name: app_redis
      environment:
        SERVICE_NAME: redis
      ports:
        - "6380:6379"
      networks:
        - app-network
  dbmysql:
    image: mysql:5.7
    restart: always
    environment:
        MYSQL_DATABASE: 'db'
        # So you don't have to use root, but you can if you like
        MYSQL_USER: 'user'
        # You can use whatever password you like
        MYSQL_PASSWORD: 'password'
        # Password for root access
        MYSQL_ROOT_PASSWORD: '123456789'
    ports:
        - '3307:3306'
    expose:
        - '3306'
    volumes:
        - my-db:/var/lib/mysql
    networks:
        - app-network
#Docker Networks
networks:
    app-network:
        driver: bridge